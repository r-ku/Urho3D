include "pipelines/common.glsl"

common [[ 
	layout(std140, binding = 4) uniform Drawcall {
		ivec4 u_resolution;
		vec4 u_half_extents;
		vec4 u_pos;
	};
]]

------------------

vertex_shader [[
	layout (location = 0) in vec3 a_position;
	layout (location = 0) out vec3 v_uv;
	void main()
	{
		v_uv = a_position;
		gl_Position = u_camera_projection * u_camera_view * vec4(a_position * u_half_extents.xyz + u_pos.xyz, 1);
	}
]]

---------------------


fragment_shader [[
	layout (location = 0) in vec3 v_uv;
	layout (location = 0) out vec4 o_color;

	layout (binding=0) uniform sampler2D u_gbuffer0;
	layout (binding=1) uniform sampler2D u_gbuffer1;
	layout (binding=2) uniform sampler2D u_gbuffer2;
	layout (binding=3) uniform sampler2D u_gbuffer_depth;
	layout (binding=4) uniform sampler3D u_sh0;
	layout (binding=5) uniform sampler3D u_sh1;
	layout (binding=6) uniform sampler3D u_sh2;
	layout (binding=7) uniform sampler3D u_sh3;
	layout (binding=8) uniform sampler3D u_sh4;
	layout (binding=9) uniform sampler3D u_sh5;
	layout (binding=10) uniform sampler3D u_sh6;

	void main()
	{
		vec2 screen_uv = gl_FragCoord.xy / u_framebuffer_size;
		vec3 wpos = getViewPosition(u_gbuffer_depth, u_camera_inv_view_projection, screen_uv);
		vec3 uv3 = (wpos - u_pos.xyz) / u_half_extents.xyz;
		if (any(greaterThan(abs(uv3), vec3(1)))) discard;

		vec4 gb0 = texture(u_gbuffer0, screen_uv);
		vec4 gb1 = texture(u_gbuffer1, screen_uv);
		vec4 gb2 = texture(u_gbuffer2, screen_uv);

		vec3 albedo = gb0.rgb;
		vec3 normal = gb1.rgb * 2 - 1;
		float roughness = gb0.w;
		float metallic = gb1.w;
		vec3 V = normalize(-wpos);

		uv3 = uv3 * 0.5 + 0.5;

		uv3 *= u_resolution.xyz;
		//uv3 = uv3 +  0.5;
		uv3 /= u_resolution.xyz;

		vec4 sh0 = textureLod(u_sh0, uv3, 0);
		vec4 sh1 = textureLod(u_sh1, uv3, 0);
		vec4 sh2 = textureLod(u_sh2, uv3, 0);
		vec4 sh3 = textureLod(u_sh3, uv3, 0);
		vec4 sh4 = textureLod(u_sh4, uv3, 0);
		vec4 sh5 = textureLod(u_sh5, uv3, 0);
		vec4 sh6 = textureLod(u_sh6, uv3, 0);

		vec3 n = normal;
		vec3 irradiance =  
			  sh0.rgb
			+ vec3(sh0.a, sh1.rg) * (n.y)
			+ vec3(sh1.ba, sh2.r) * (n.z)
			+ sh2.gba * (n.x)
			+ sh3.rgb * (n.y * n.x)
			+ vec3(sh3.a, sh4.rg) * (n.y * n.z)
			+ vec3(sh4.ba, sh5.r) * (3.0 * n.z * n.z - 1.0)
			+ sh5.gba * (n.z * n.x)
			+ sh6.rgb * (n.x * n.x - n.y * n.y);
		irradiance = max(vec3(0), irradiance);
		vec3 indirect = PBR_ComputeIndirectDiffuse(irradiance, albedo, metallic, normal, V);
		o_color = vec4(indirect * u_light_indirect_intensity, 1);

		//o_color = vec4(fract(uv3.xyz * u_resolution.xyz), 1);
		
		//ivec3 loc = ivec3(uv3 * vec3(u_resolution));
		//if (loc.x == 0 && loc.y == 0 && loc.z == 0) o_color = vec4(1, 0, 0, 1);
		//discard;
	}
]]