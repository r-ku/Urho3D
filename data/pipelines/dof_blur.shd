include "pipelines/common.glsl"

vertex_shader [[
	layout (binding=0) uniform sampler2D u_source;
	
	layout(location=0) out vec2 v_uv0;
	layout(location=1) out vec4 v_uv1;
	layout(location=2) out vec4 v_uv2;
	void main() {
		vec2 ts = 1.0/textureSize(u_source, 0);
		v_uv0 = vec2(gl_VertexID & 1, (gl_VertexID & 2) * 0.5);
		vec4 pos = fullscreenQuad(gl_VertexID, v_uv0);// vec4((gl_VertexID & 1) * 2 - 1, (gl_VertexID & 2) - 1, 0, 1);
		#ifdef HBLUR
			v_uv1 = vec4(
				v_uv0.x + 1.3846153846 * ts.x, v_uv0.y, 
				v_uv0.x + 3.2307692308 * ts.x, v_uv0.y
			);
			v_uv2 = vec4(
				v_uv0.x - 1.3846153846 * ts.x, v_uv0.y, 
				v_uv0.x - 3.2307692308 * ts.x, v_uv0.y
			);
		#else
			v_uv1 = vec4(
				v_uv0.x, v_uv0.y + 1.3846153846 * ts.y, 
				v_uv0.x, v_uv0.y + 3.2307692308 * ts.y
			);
			v_uv2 = vec4(
				v_uv0.x, v_uv0.y - 1.3846153846 * ts.y, 
				v_uv0.x, v_uv0.y - 3.2307692308 * ts.y
			);
		#endif
		gl_Position = pos;
	}
]]


fragment_shader [[
	#define DOF_NEAR_BLUR u_blur_args.x
	#define DOF_NEAR_SHARP u_blur_args.y
	#define DOF_FAR_SHARP u_blur_args.z
	#define DOF_FAR_BLUR u_blur_args.w
	layout(std140, binding = 4) uniform Drawcall {
		uniform vec4 u_blur_args;
	};
	
	float toLinearDepth(float ndc_depth)
	{
		vec4 pos_proj = vec4(0, 0, ndc_depth, 1.0);
		
		vec4 view_pos = u_camera_inv_projection * pos_proj;
		
		return -view_pos.z / view_pos.w;
	}

	layout (binding=0) uniform sampler2D u_source;
	layout (binding=1) uniform sampler2D u_depth;
	
	layout(location=0) in vec2 v_uv0;
	layout(location=1) in vec4 v_uv1;
	layout(location=2) in vec4 v_uv2;
	layout(location=0) out vec4 o_color;

	void main() {
		vec4 color = texture(u_source, v_uv0.xy) * 0.2270270270
		+ texture(u_source, v_uv1.xy) * 0.3162162162
		+ texture(u_source, v_uv1.zw) * 0.0702702703
		+ texture(u_source, v_uv2.xy) * 0.3162162162
		+ texture(u_source, v_uv2.zw) * 0.0702702703;

		float depth = texture(u_depth, v_uv0.xy).r;
		float linear_depth = toLinearDepth(depth);
		#ifdef NEAR
			color.a = 1 - smoothstep(DOF_NEAR_BLUR, DOF_NEAR_SHARP, linear_depth);
		#else
			color.a = smoothstep(DOF_FAR_SHARP, DOF_FAR_BLUR, linear_depth);
		#endif
		o_color = color;
	}
]]